{"name": "test_2_home_screen", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"selected-text\" alt=\"...\" title=\"סכום\">סכום</span> is not clickable at point (922, 490). Other element would receive the click: <img class=\"inner-element\" src=\"https://storage.googleapis.com/adoric-user-images/f62c5c8e-76ee-41e3-aa03-0ca599c9d336.gif\" style=\"width: 337px; height: 247px; -o-object-fit: cover; object-fit: cover; opacity: 1; -webkit-border-radius: 0px; -moz-border-radius: 0px; border-radius: 0px; -webkit-box-shadow: none; -moz-box-shadow: none; box-shadow: none; left: 0px; top: 0px; position: absolute; \" data-event-name=\"adoric_93c1_5e827becdc861\" data-width=\"337\" data-height=\"247\" data-event-value=\"0\" alt=\"undefined\" data-shadow-angle=\"null\" data-shadow-distance=\"null\" data-shadow=\"null\" data-src=\"https://storage.googleapis.com/adoric-user-images/228be735-dbf6-4eaa-ab12-aeeab713e9e8.gif\" data-alt=\"undefined\" data-left=\"0\" data-top=\"0\">\n  (Session info: chrome=112.0.5615.86)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x00A7DCE3]\n\t(No symbol) [0x00A139D1]\n\t(No symbol) [0x00924DA8]\n\t(No symbol) [0x009552EA]\n\t(No symbol) [0x00953BBA]\n\t(No symbol) [0x00951EFB]\n\t(No symbol) [0x00951027]\n\t(No symbol) [0x00948D05]\n\t(No symbol) [0x0096AECC]\n\t(No symbol) [0x00948726]\n\t(No symbol) [0x0096B224]\n\t(No symbol) [0x0097D57C]\n\t(No symbol) [0x0096ACC6]\n\t(No symbol) [0x00946F68]\n\t(No symbol) [0x009480CD]\n\tGetHandleVerifier [0x00CF3832+2506274]\n\tGetHandleVerifier [0x00D29794+2727300]\n\tGetHandleVerifier [0x00D2E36C+2746716]\n\tGetHandleVerifier [0x00B26690+617600]\n\t(No symbol) [0x00A1C712]\n\t(No symbol) [0x00A21FF8]\n\t(No symbol) [0x00A220DB]\n\t(No symbol) [0x00A2C63B]\n\tBaseThreadInitThunk [0x770A0099+25]\n\tRtlGetAppContainerNamedObjectPath [0x77697B6E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77697B3E+238]", "trace": "self = <main_test.TestBuyMeWebsite testMethod=test_2_home_screen>\n\n    def test_2_home_screen(self):\n>       self.home_screen.test_home_screen()\n\nmain_test.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nhome_screen_test.py:21: in test_home_screen\n    driver.find_element(By.XPATH, value=\"//span[@class='selected-text']\").click()\n..\\..\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\automation_buyme_website-o_Pszt-_-py3.9\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\automation_buyme_website-o_Pszt-_-py3.9\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:404: in _execute\n    return self._parent.execute(command, params)\n..\\..\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\automation_buyme_website-o_Pszt-_-py3.9\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B8EC3C48E0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77697B6E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77697B3E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"selected-text\" alt=\"...\" title=\"סכום\">סכום</span> is not clickable at point (922, 490). Other element would receive the click: <img class=\"inner-element\" src=\"https://storage.googleapis.com/adoric-user-images/f62c5c8e-76ee-41e3-aa03-0ca599c9d336.gif\" style=\"width: 337px; height: 247px; -o-object-fit: cover; object-fit: cover; opacity: 1; -webkit-border-radius: 0px; -moz-border-radius: 0px; border-radius: 0px; -webkit-box-shadow: none; -moz-box-shadow: none; box-shadow: none; left: 0px; top: 0px; position: absolute; \" data-event-name=\"adoric_93c1_5e827becdc861\" data-width=\"337\" data-height=\"247\" data-event-value=\"0\" alt=\"undefined\" data-shadow-angle=\"null\" data-shadow-distance=\"null\" data-shadow=\"null\" data-src=\"https://storage.googleapis.com/adoric-user-images/228be735-dbf6-4eaa-ab12-aeeab713e9e8.gif\" data-alt=\"undefined\" data-left=\"0\" data-top=\"0\">\nE         (Session info: chrome=112.0.5615.86)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x00A7DCE3]\nE       \t(No symbol) [0x00A139D1]\nE       \t(No symbol) [0x00924DA8]\nE       \t(No symbol) [0x009552EA]\nE       \t(No symbol) [0x00953BBA]\nE       \t(No symbol) [0x00951EFB]\nE       \t(No symbol) [0x00951027]\nE       \t(No symbol) [0x00948D05]\nE       \t(No symbol) [0x0096AECC]\nE       \t(No symbol) [0x00948726]\nE       \t(No symbol) [0x0096B224]\nE       \t(No symbol) [0x0097D57C]\nE       \t(No symbol) [0x0096ACC6]\nE       \t(No symbol) [0x00946F68]\nE       \t(No symbol) [0x009480CD]\nE       \tGetHandleVerifier [0x00CF3832+2506274]\nE       \tGetHandleVerifier [0x00D29794+2727300]\nE       \tGetHandleVerifier [0x00D2E36C+2746716]\nE       \tGetHandleVerifier [0x00B26690+617600]\nE       \t(No symbol) [0x00A1C712]\nE       \t(No symbol) [0x00A21FF8]\nE       \t(No symbol) [0x00A220DB]\nE       \t(No symbol) [0x00A2C63B]\nE       \tBaseThreadInitThunk [0x770A0099+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77697B6E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77697B3E+238]\n\n..\\..\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\automation_buyme_website-o_Pszt-_-py3.9\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: ElementClickInterceptedException"}, "start": 1681721385982, "stop": 1681721404647, "uuid": "0ef61a92-0800-4b58-a981-cb219cee2e76", "historyId": "d3fed08cd182a7eec5f67430256de5b1", "testCaseId": "b176892adfd65d00d4ddf2bc0bd4252f", "fullName": "main_test.TestBuyMeWebsite#test_2_home_screen", "labels": [{"name": "suite", "value": "main_test"}, {"name": "subSuite", "value": "TestBuyMeWebsite"}, {"name": "host", "value": "DESKTOP-QCDRES4"}, {"name": "thread", "value": "6792-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "main_test"}]}